$[ language swift ]
$[ domain SwiftClientAPI ]
$[ D summary, main "This template generates code to access the an server API from a Swift client." ]
$[ import "APIFunctions" ]
$[ import "../util/ReleaseFunctions" ]

$[ foreach module in space.modules if !module.isIncluded && module.hasPrimaryEntities ]
    $[ let className = module|domain:SwiftClientAPI|name|capitalize ]
    $[ file "" className "swift" ]
//
//  ${className}.swift
//
        $[ if module.hasDescription ]
//  ${module.description|wrap}
//
        $[/ if ]
//  Generated by Template: ${__template.name}
//

import Foundation

class ${className} {

    private let restServerBaseUrl : String

    init() {
        self.restServerBaseUrl = RestServerBaseUrl.defaultValue
    }
        $[ foreach entity in module.entities if !entity.isImplicit && !entity.isExtern ]
            $[ call CheckIfInReleasedRealm(entity: entity)->(isInReleasedRealm: isInReleasedRealm) ]
            $[ if !isInReleasedRealm ]
                $[ continue ]
            $[/ if ]

    //
    // GET ${entity|title} BY ID
    //
    func get${entity.name}ById(id: UUID, completion: @escaping (${entity.name}?, Error?) -> Void) {
        let idStr = id.uuidString
        let urlString = restServerBaseUrl + "/${entity|domain:APIPath|name}/\(idStr)"

        guard let url = URL(string: urlString) else {
            print("Invalid URL")
            completion(nil, NSError(domain: "Invalid URL", code: 400, userInfo: nil))
            return
        }
        var request = URLRequest(url: url)
        request.setValue("application/json", forHTTPHeaderField: "Accept")

        URLSession.shared.dataTask(with: request) { data, response, error in
            guard let data = data, error == nil else {
                completion(nil, error)
                return
            }

            do {
                let returnedObject = try JSONDecoder().decode(${entity.name}.self, from: data)
                completion(returnedObject, nil)
            } catch let jsonError {
                completion(nil, jsonError)
            }
        }.resume()
    }

            $[ call GetList(entity: entity, relationship: null) ]
            $[ foreach relationship in entity.relationships if relationship.isParent ]
                $[ let allow = relationship.isParent ]
                $[ if !allow && relationship.to.entity.hasRelationshipToEntityNamed(entity.name) ]
                    $[ let allow = true ]
                    $[ log info ]Adding API for getting list of ${entity.name} by ${relationship.to.entity.name}$[/ log ]
                $[/ if ]
                $[ if allow ]
                    $[ call GetList(entity: entity, relationship: relationship) ]
                $[/ if ]
            $[/ foreach ]
        $[/ foreach ]
}
    $[/ file ]
$[/ foreach ]