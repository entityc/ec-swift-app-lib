$[ language swift ]
$[ D summary, main "This template generates model classes for holding objects fetched from the server." ]
$[ import "../util/DefaultConstant" ]
$[ import "../util/ReleaseFunctions" ]
$[ publisher org.entityc.swift.network.model ]
    $[ foreach module in space.modules if !module.isIncluded ]
        $[ foreach entity in module.entities if !entity.isImplicit && !entity.isExtern ]
            $[ call CheckIfInReleasedRealm(entity: entity)->(isInReleasedRealm: isInReleasedRealm) ]
            $[ if !isInReleasedRealm ]
                $[ continue ]
            $[/ if ]
            $[ capture modelName ]${entity.name}$[/ capture ]
            $[ file "" modelName "swift" ]
//
//  ${modelName}.swift
//
                $[ if entity.hasDescription ]
//  ${entity.description|wrap}
//
                $[/ if ]
//  Generated by Template: ${__template.name}
//

import Foundation

class ${modelName}: Identifiable, Decodable {

$[ outlet declarations
   D "This is where you can add additional variable declarations."
]
$[/ outlet ]
                $[ if entity.hasPrimaryKey ]
    // PRIMARY KEY

                    $[ if entity.primaryKeyAttribute.hasDescription ]
    // ${entity.primaryKeyAttribute.description}
                    $[/ if ]
    var ${entity.primaryKeyAttribute|domain:JSONDTO|name}: ${entity.primaryKeyAttribute.type|language}
                $[/ if ]
                $[ let showComment = true ]
                $[ foreach attribute in entity.attributes|sort ]

                    $[ if showComment ]
                        $[ let showComment = false ]
    // ATTRIBUTES

                    $[/ if ]
                    $[ if attribute.hasDescription ]
    // ${attribute.description}
                    $[/ if ]
                    $[ let supported = !attribute.type.isEntityType && !attribute.type.isDataType ]
                    $[ let optionality = !supported ? "?":"" ]
                    $[ let arrayStart = attribute.isArray ? "[":"" ]
                    $[ let arrayEnd = attribute.isArray ? "]":"" ]
    var ${attribute|domain:JSONDTO|name}: ${arrayStart}${attribute.type|language}${arrayEnd}?
    var ${attribute|domain:JSONDTO|name}OrDefault: ${arrayStart}${attribute.type|language}${arrayEnd}${optionality} {
        get {
                    $[ call DefaultConstant(type: attribute.type)->(constant: constant) ]
            ${attribute|domain:JSONDTO|name}$[ if supported ] ?? ${arrayStart}${constant}${arrayEnd}$[/ if ]

        }
    }
                $[/ foreach ]
                $[ let showComment = true ]
                $[ foreach relationship in entity.relationships|sort ]
                    $[ if showComment ]
                        $[ let showComment = false ]

    // RELATIONSHIPS
                    $[/ if ]
                    $[ let oneToMany = relationship.isOneToMany ]
                    $[ let manyToOne = relationship.to.isOne ]
                    $[ if manyToOne || oneToMany ]
                        $[ let optionality = "?" ]$[* since we want to have an object of each entity with just an ID we have to make everything optional *]
                        $[ let toEntity = relationship.to.entity ]
                        $[ call CheckIfReleasedEntity(entity: toEntity)->(isReleasedEntity: isReleasedEntity) ]
                        $[ if !isReleasedEntity && !toEntity.hasTag("release:top") ]
                            $[ log warning ]Somehow this released entity has a relationship with a non-released entity: ${toEntity.name}. Ignoring it.$[/ log ]
                            $[ continue ]
                        $[/ if ]

                        $[ if relationship.hasDescription ]
    // ${relationship.description}
                        $[/ if ]
    var ${relationship|domain:JSONDTO|name}: $[ if oneToMany ][$[/ if ]${relationship.to.entity.name}$[ if oneToMany ]]$[/ if ]${optionality}
                    $[/ if ]
                $[/ foreach ]
$[ outlet methods
   D "This is where you can add additional custom methods to a model class."
]
$[/ outlet ]
}
            $[/ file ]
        $[/ foreach ]

        $[ foreach en in module.enums ]
            $[ let enum = en|domain:JSONDTO ]
            $[ capture modelName ]${enum.name}$[/ capture ]
            $[ file "" modelName "swift" ]
//
//  ${modelName}.swift
//
                $[ if enum.hasDescription ]
//  ${enum.description|wrap}
//
                $[/ if ]
//  Generated by Template: ${__template.name}
//

import Foundation

enum ${modelName}: String, Codable {
                $[ foreach it in en.items ]
                    $[ let item = it|domain:JSONDTO ]
                    $[ if item.hasDescription ]
    // ${item.description}
                    $[/ if ]
    case ${item.name} = "${item.name}"
                $[/ foreach ]
}
            $[/ file ]
        $[/ foreach ]
    $[/ foreach ]
$[/ publisher ]