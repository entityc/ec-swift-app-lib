$[ language swift ]
$[ domain AdminUI ]
$[ D summary, main "This template generates the top Home screen for the app." ]
$[ let viewName = "AppHomeView" ]
$[ file "" viewName "swift" ]
//
//  ${viewName}.swift
//
//  Generated by Template: ${__template.name}
//

import SwiftUI

struct MenuItem {
    var title : String
    var description : String
    var viewType : any View.Type

    func createView() -> some View {
        switch viewType {
    $[ foreach entity in space.entities if (entity|domain).hasTag("home")]
        case is ${entity.name}ListView.Type:
            return AnyView(${entity.name}ListView())
    $[/ foreach ]
        default:
            print("unknown")
        }
        return AnyView(${entity.name}ListView())
    }
}

struct ${viewName}: View {

    let items: [MenuItem] = [
    $[ foreach entity in space.entities if (entity|domain).hasTag("home")]
        MenuItem(      title: "${entity|title|plural}",
                 description: "${(entity|domain).tagValue("home:description")}",
                    viewType: ${entity.name}ListView.self),
    $[/ foreach ]
    ]

    let cellColor = Color(red: 0.20, green: 0.3, blue: 0.8)
    let subtitleColor = Color(white:0.85)

    var body: some View {
        NavigationView {
            Group {
                List(items, id: \.title) { item in
                    NavigationLink(destination: item.createView()) {
                        VStack(alignment: .leading) {
                                Text(item.title)
                                    .font(.headline)
                                    .foregroundColor(.white)
                                    .padding(.bottom, 8.0)
                                Text(item.description)
                                    .font(.subheadline)
                                    .foregroundColor(subtitleColor)
                            }
                            .padding()                // Add padding around each cell's content
                            .frame(maxWidth: .infinity, alignment: .leading)  // This ensures the VStack fills the width
                            .background(cellColor)    // Set a background color
                            .cornerRadius(8)          // Optionally round the corners of each cell
                            .shadow(radius: 3)        // Optionally add a shadow
                            .padding(.horizontal)     // Add horizontal padding to create gaps between cells
                        }
                }
                .listStyle(PlainListStyle())  // This removes the default cell dividers
            }
        .navigationTitle("Top Menu")
        }
    }
}

#Preview {
    ${viewName}()
}
$[/ file ]