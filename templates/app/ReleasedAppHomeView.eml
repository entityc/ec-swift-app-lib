$[ language swift ]
$[ domain AdminUI ]
$[ D summary, main "This template generates the top Home screen for the app when configured to be Release" ]
$[ D summary, main "centric." ]
$[ import "../util/ReleaseFunctions" ]
$[ call GetReleaseEntity()->(releaseEntity: releaseEntity) ]
$[ let releaseClassName = releaseEntity.name ]
$[ let releaseVariableName = releaseClassName|uncapitalize ]
$[ let viewName = "ReleasedAppHomeView" ]
$[ file "" viewName "swift" ]
//
//  ${viewName}.swift
//
//  Generated by Template: ${__template.name}
//

import SwiftUI

struct ReleasedMenuItem {
    var title : String
    var description : String
    var viewType : any View.Type

    func createView(${releaseVariableName} : ${releaseClassName}) -> some View {
        switch viewType {
    $[ foreach entity in space.entities if (entity|domain).hasTag("home") && !entity.hasTag("release:top") ]
        case is ${entity.name}ListView.Type:
            return AnyView(${entity.name}ListView(${releaseVariableName}:${releaseVariableName}))
    $[/ foreach ]
        default:
            print("unknown")
        }
        return AnyView(${entity.name}ListView(${releaseVariableName}:${releaseVariableName}))
    }
}

struct ${viewName}: View {
    @Environment(\.colorScheme) var colorScheme

    var ${releaseVariableName} : ${releaseClassName}

    init(${releaseVariableName} : ${releaseClassName}) {
        self.${releaseVariableName} = ${releaseVariableName}
    }

    let items: [ReleasedMenuItem] = [
    $[ foreach d_entity in (space.domain("AdminUI")).declaredDomainEntities if d_entity.hasTag("home") && !d_entity.entity.hasTag("release:top") ]
        $[ let entity = d_entity.entity ]
        $[ let title = entity|title|plural ]
        $[ if (entity|domain).hasTag("title") ]
            $[ let title = (entity|domain).tagValue("title")|plural ]
        $[/ if ]
        ReleasedMenuItem(      title: "${title}",
                 description: "${(entity|domain).tagValue("home:description")}",
                    viewType: ${entity.name}ListView.self),
    $[/ foreach ]
    ]

    let kOrangeColor = Color(red: 0.953, green: 0.424, blue: 0.239)
    let kBlueColor = Color(red: 0.066, green: 0.573, blue: 0.8)
    var titleTextColor: Color {
        colorScheme == .dark ? .white : .white
    }
    var cellBackgroundColor: Color {
        colorScheme == .dark ? Color(red: 0.1, green: 0.2, blue: 0.5) : kBlueColor
    }
    var subtitleTextColor: Color {
        colorScheme == .dark ? .white : .white
    }

    var body: some View {
        List(items, id: \.title) { item in
            NavigationLink(destination: item.createView(${releaseVariableName}:${releaseVariableName})) {
                VStack(alignment: .leading) {
                        Text(item.title)
                            .font(.headline)
                            .foregroundColor(titleTextColor)
                            .padding(.bottom, 8.0)
                        Text(item.description)
                            .font(.subheadline)
                            .foregroundColor(subtitleTextColor)
                    }
                    .padding()                // Add padding around each cell's content
                    .frame(maxWidth: .infinity, alignment: .leading)  // This ensures the VStack fills the width
                    .background(cellBackgroundColor)    // Set a background color
                    .cornerRadius(8)          // Optionally round the corners of each cell
                    .shadow(radius: 3)        // Optionally add a shadow
                    .padding(.horizontal)     // Add horizontal padding to create gaps between cells
                }
        }
        .listStyle(PlainListStyle())  // This removes the default cell dividers
    }
}

$[*
#Preview {
    ${viewName}()
}
*]

$[/ file ]