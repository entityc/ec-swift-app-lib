$[ import "../util/ReleaseFunctions" ]
$[ function SimpleListViewModel
   (entity,
    alternateClassName,
    space
   )->
   (viewModelClassName,
    listVariableName
   ) ]
    $[ call CheckIfReleasedEntity(entity: entity)->(isReleasedEntity: isReleasedEntity) ]
    $[ let viewModelClassName = alternateClassName != null ? alternateClassName:(entity|domain:SwiftClientViewModel|name) ]
class ${viewModelClassName}: ObservableObject {
    $[ if isReleasedEntity ]
        $[ call GetReleaseEntity()->(releaseEntity: releaseEntity) ]
        $[ let releaseClassName = releaseEntity.name ]
        $[ let releaseVariableName = releaseClassName|uncapitalize ]
    $[/ if ]
    $[ capture listVariableName ]${entity.name|uncapitalize}List$[/ capture ]
    @Published var ${listVariableName}: [${entity.name}] = []
    @Published var isLoading: Bool = false
    @Published var error: Error?

    $[ let clientApiClass = entity.module|domain:SwiftClientAPI|name|capitalize ]
    $[ let clientApiVariable = clientApiClass|uncapitalize ]
    private let ${clientApiVariable} = ${clientApiClass}()

    func get${entity.name}List($[ if isReleasedEntity ]releaseId:UUID$[/ if ]) {
        isLoading = true
        ${clientApiVariable}.get${entity.name}List$[ if isReleasedEntity ](releaseId:releaseId)$[/ if ] { [weak self] objects, error in
            DispatchQueue.main.async {
                self?.isLoading = false
                if let ${listVariableName} = objects {
                    self?.${listVariableName} = ${listVariableName}
                } else if let error = error {
                    print ("ERROR: \(error.localizedDescription)")
                    self?.error = error
                }
            }
        }
    }
}
$[/ function ]

$[ function ChildListViewModel
   (relationship,
    space
   )->
   (viewModelClassName,
    listVariableName
   ) ]
    $[ let entity = relationship.from.entity ]
    $[ let toEntity = relationship.to.entity ]
    $[ call CheckIfReleasedEntity(entity: entity)->(isReleasedEntity: isReleasedEntity) ]
    $[ capture viewModelClassName ]${relationship|name|capitalize}By${entity|name}ViewModel$[/ capture ]
class ${viewModelClassName}: ObservableObject {
    $[ if isReleasedEntity ]
        $[ call GetReleaseEntity()->(releaseEntity: releaseEntity) ]
        $[ let releaseClassName = releaseEntity.name ]
        $[ let releaseVariableName = releaseClassName|uncapitalize ]
    var ${releaseVariableName} : ${releaseClassName}?

    $[/ if ]
    $[ capture listVariableName ]${toEntity.name|uncapitalize}List$[/ capture ]
    @Published var ${listVariableName}: [${toEntity.name}] = []
    @Published var isLoading: Bool = false
    @Published var error: Error?

    $[ let clientApiClass = toEntity.module|domain:SwiftClientAPI|name|capitalize ]
    $[ let clientApiVariable = clientApiClass|uncapitalize ]
    private let ${clientApiVariable} = ${clientApiClass}()

    func getList($[ if isReleasedEntity ]releaseId:UUID, $[/ if ]id: UUID) -> Void {
        isLoading = true
        ${clientApiVariable}.get${toEntity.name}ListBy${relationship.reverseRelationship|name|capitalize}($[ if isReleasedEntity ]releaseId:releaseId, $[/ if ]id:id) { [weak self] objects, error in
            DispatchQueue.main.async {
                self?.isLoading = false
                if let ${listVariableName} = objects {
                    self?.${listVariableName} = ${listVariableName}
                } else if let error = error {
                    print ("ERROR: \(error.localizedDescription)")
                    self?.error = error
                }
            }
        }
    }
}
$[/ function ]